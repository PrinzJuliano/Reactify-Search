{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/theme-toggle/theme-toggle.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","ThemeToggleComponent","theme","localStorage","window","matchMedia","matches","state","this","applyTheme","Tile","Toggle","labelA","labelB","defaultToggled","onToggle","toggle","toggleTheme","toDark","console","group","log","groupEnd","newTheme","setState","document","documentElement","classList","add","remove","React","Component","SearchBoxComponent","placeholder","onChange","type","App","updateSearch","event","searchField","target","value","fetch","then","response","json","users","filteredMonsters","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e732160.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.component.css\";\n\nexport const Card = (props) => (\n  <div className=\"card-container m-4 flex flex-col bg-white dark:bg-gray-600 p-5 cursor-pointer border-0 dark:border shadow dark:shadow-none dark:border-gray-500 border-solid rounded\">\n    <img\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      alt=\"Is a monster\"\n      className=\"my-1\"\n    />\n    <h2 className=\"font-sans text-2xl font-bold text-black dark:text-white\">\n      {props.monster.name}\n    </h2>\n    <p className=\"test-black dark:text-white break-all\">\n      {props.monster.email}\n    </p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.component.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list flex flex-wrap overflow-hidden\">\n      {props.monsters.map((monster) => (\n        <div\n          className=\"w-full overflow-hidden sm:w-1/2 md:w-1/3 lg:w-1/4\"\n          key={monster.id}\n        >\n          <Card monster={monster} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Tile, Toggle } from \"carbon-components-react\";\n\nexport class ThemeToggleComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let theme;\n    if (\n      localStorage.theme === \"dark\" ||\n      (!(\"theme\" in localStorage) &&\n        window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n    ) {\n      theme = \"dark\";\n    } else {\n      theme = \"light\";\n    }\n\n    this.state = { theme };\n  }\n\n  componentDidMount() {\n    this.applyTheme(this.state.theme);\n  }\n\n  render() {\n    return (\n      <div className=\"theme-toggle text-left justify-content-start p-2\">\n        <div className=\"inline-block\">\n          <Tile>\n            <label className=\"toggle-label\">Switch the theme</label>\n            <div className=\"flex align-bottom\">\n              <Toggle\n                id=\"toggleThemeButton\"\n                labelA=\"☀️\"\n                labelB=\"🌙\"\n                defaultToggled={this.state.theme === \"dark\"}\n                onToggle={(toggle) => this.toggleTheme(toggle)}\n              />\n            </div>\n          </Tile>\n        </div>\n      </div>\n    );\n  }\n\n  toggleTheme(toDark) {\n    console.group(\"toggleTheme\");\n    console.log(toDark);\n    console.groupEnd();\n    const newTheme = toDark ? \"dark\" : \"light\";\n    this.applyTheme(newTheme);\n    this.setState({\n      theme: newTheme,\n    });\n  }\n\n  applyTheme(newTheme) {\n    if (newTheme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n      localStorage.theme = \"dark\";\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n      localStorage.theme = \"light\";\n    }\n  }\n}\n","import React from \"react\";\n\nimport \"./search-box.component.css\";\n\nexport const SearchBoxComponent = ({ placeholder, onChange }) => (\n  <input\n    className=\"search-box dark:bg-gray-700 dark:text-white shadow\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={onChange}\n  />\n);\n","import \"./App.css\";\nimport React from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { ThemeToggleComponent } from \"./components/theme-toggle/theme-toggle.component\";\nimport { SearchBoxComponent } from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) =>\n        this.setState({\n          monsters: users,\n        })\n      );\n  }\n\n  updateSearch = (event) => {\n    // Arrow function uses lexical scoping (binds this to context)\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"dark:text-blue-500 text-blue-700\">Search 707</h1>\n        <ThemeToggleComponent />\n        <SearchBoxComponent\n          placeholder=\"Search Monsters...\"\n          onChange={this.updateSearch}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"carbon-components/css/carbon-components.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// On page load or when changing themes, best to add inline in `head` to avoid FOUC\n"],"sourceRoot":""}